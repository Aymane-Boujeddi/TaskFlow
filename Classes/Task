<?php
require_once "User";

class Task extends Database
{
    private $taskID;
    private $taskTitle;
    private $taskContent;
    private $taskType;
    private $taskStatus;
    private $creationDate;
    private $taskOwner;
    private $userID;



    public function __construct($taskContent, $taskTitle, $taskType,$taskOwner)
    {
        $this->taskContent = $taskContent;
        $this->taskTitle = $taskTitle;
        $this->taskType = $taskType;
        $this->taskOwner = $taskOwner;
    }

    public function createTask()
    {
        $db = $this->connect();
        // $checkUser = "SELECT * FROM users where user_name = :name";
        // $checkStsmt = $db->prepare($checkUser);
        // $checkStsmt->execute([":name" => $this->taskOwner]);
        // $userExic = $checkStsmt->fetch();
        $newUser = new User($this->taskOwner);
        $newUserID = $newUser->getUserID();
        if (!$newUser->getUserID()) {
            // die("user : " . $this->taskOwner . " doesn't exict ");
            // $addUserQuery = "INSERT INTO users(user_name) values (:name)";
            // $addStmt = $db->prepare($addUserQuery);
            // $addStmt->execute([
            //     ":name" => $this->taskOwner
            // ]);
            // $this->userID = $db->lastInsertId();
            
            $this->userID = $newUser->setUser();

        }else{
            $this->userID = $newUserID['userID'];
        }
        
        $insertquery = "INSERT INTO tasks(task_title,task_content,task_type,userID) values(:task_title,:taskContent,:taskType,:userID)";
        $insertStmt = $db->prepare($insertquery);
        $insertStmt->execute([
            ":task_title" => $this->taskTitle,
            ":taskContent" => $this->taskContent,
            ":taskType" => $this->taskType,
            ":userID" => $this->userID
        ]);
    }

    public function showTask()
    {
        $db = $this->connect();
        $showQuery = "SELECT * FROM tasks join users on users.userID = tasks.userID;";
        $showStmt = $db->prepare($showQuery);
        $showStmt->execute([]);
        $showtasks = $showStmt->fetchAll();
        return $showtasks;
    }
    public function modifyTask($newStatus, $modifyID)
    {
        $db = $this->connect();
        $query = "UPDATE tasks set task_status = :newStatus where taskID = :ID";
        $modifyStmt = $db->prepare($query);
        $modifyStmt->execute([
            ":newStatus" => $newStatus,
            ":ID" => $modifyID
        ]);
    }

    public function getUsersWithTaskCount()
    {
        $sql = "SELECT 
                    u.user_name,
                    COUNT(t.taskID) as total_tasks,
                    SUM(CASE WHEN t.task_status = 'pending' THEN 1 ELSE 0 END) as pending_tasks,
                    SUM(CASE WHEN t.task_status = 'done' THEN 1 ELSE 0 END) as completed_tasks
                FROM users u
                LEFT JOIN tasks t ON u.userID = t.userID
                GROUP BY u.userID, u.user_name";

        $stmt = $this->connect()->prepare($sql);
        $stmt->execute();

        return $stmt->fetchAll();
    }
    public function tasksCount($type){
        $db = $this->connect();
        if($type === 'bug'){
            $query = "SELECT count(taskID) as total_tasks  from tasks where task_type = :type";
        $countStmt = $db->prepare($query);
        $taskCount = $countStmt->execute([
            ":type" => $type
        ]);
        }elseif($type === 'feature'){
            $query = "SELECT count(taskID) as total_tasks  from tasks where task_type = :type";
        $countStmt = $db->prepare($query);
        $taskCount = $countStmt->execute([
            ":type" => $type
        ]);
        }else{
            $query = "SELECT count(taskID) as total_tasks  from tasks ";
        $countStmt = $db->prepare($query);
        $taskCount = $countStmt->execute([

        ]);
        }
        $taskCount = $countStmt->fetch();
        return $taskCount['total_tasks'];
    }
    public function deleteTask($taskID){
        $db = $this->connect();
        $query = "DELETE FROM tasks WHERE taskID = :ID";
        $deleteStmt = $db->prepare($query);
        $deleteStmt->execute([
            ":ID" => $taskID
        ]);
    }
}
